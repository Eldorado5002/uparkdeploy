{"ast":null,"code":"import _objectSpread from\"C:/Users/nagas/Desktop/Uparkweb/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/pages/Index.jsx\nimport React,{useEffect,useState}from\"react\";import\"./style.css\";import{Link,useNavigate}from\"react-router-dom\";import socketService from\"../services/socketService\";import SlotReservation from\"../components/SlotReservation\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Index(){const navigate=useNavigate();const user=(()=>{try{return JSON.parse(localStorage.getItem('upark_user')||'null');}catch(_unused){return null;}})();const logout=()=>{localStorage.removeItem('upark_token');localStorage.removeItem('upark_user');navigate('/signup');};const[availableSlots,setAvailableSlots]=useState(0);const[totalSlots]=useState(6);const[gateStatus,setGateStatus]=useState(\"CLOSED\");const[entryGateStatus,setEntryGateStatus]=useState(\"CLOSED\");const[exitGateStatus,setExitGateStatus]=useState(\"CLOSED\");const[freeSlotsList,setFreeSlotsList]=useState([]);const[isSystemOnline,setIsSystemOnline]=useState(false);const[showWelcomePopup,setShowWelcomePopup]=useState(true);const[activeTab,setActiveTab]=useState('monitor');const[realtimeSlots,setRealtimeSlots]=useState([]);useEffect(()=>{console.log(\"Index page loaded\");// Initialize slots by fetching from database\nconst initializeSlots=async()=>{try{console.log('Fetching initial slots from database...');const response=await fetch('/api/slots');const data=await response.json();if(data.success&&data.slots){setRealtimeSlots(data.slots);console.log('Initialized slots from database:',data.slots);}else{// Fallback to default initialization\nconst initialSlots=[];for(let i=1;i<=totalSlots;i++){initialSlots.push({slotNumber:i,isOccupied:false,isReserved:false,location:\"A\".concat(i),slotType:'BOTH'});}setRealtimeSlots(initialSlots);}}catch(error){console.error('Error fetching initial slots:',error);// Fallback to default initialization\nconst initialSlots=[];for(let i=1;i<=totalSlots;i++){initialSlots.push({slotNumber:i,isOccupied:false,isReserved:false,location:\"A\".concat(i),slotType:'BOTH'});}setRealtimeSlots(initialSlots);}};initializeSlots();// Subscribe to real-time updates from the ESP32\nconst unsubscribeSlot=socketService.subscribeToSlotUpdates(data=>{setIsSystemOnline(true);console.log(\"Slot update received:\",data);let freeSlots=[];// Handle slot status updates\nif(data===\"FULL\"){setAvailableSlots(0);setFreeSlotsList([]);freeSlots=[];}else{// Parse comma-separated list of available slots\nfreeSlots=data.split(\",\").map(Number);setFreeSlotsList(freeSlots);setAvailableSlots(freeSlots.length);}// Update realtime slots structure to match hardware data\n// IMPORTANT: Only update isOccupied, preserve reservation status\nsetRealtimeSlots(prevSlots=>prevSlots.map(slot=>_objectSpread(_objectSpread({},slot),{},{// A slot is occupied if it's not in the free list AND not reserved\n// Reserved slots should not be marked as occupied even if sensor detects something\nisOccupied:!freeSlots.includes(slot.slotNumber)&&!slot.isReserved})));});// Subscribe to database slot updates (for reservations)\nconst unsubscribeDatabaseSlot=socketService.subscribeToDatabaseSlotUpdates(data=>{console.log(\"Database slot update received:\",data);// Update the realtime slots with reservation info\nsetRealtimeSlots(prevSlots=>prevSlots.map(slot=>slot.slotNumber===data.slotNumber?_objectSpread(_objectSpread({},slot),{},{isOccupied:data.isOccupied,isReserved:data.isReserved,reservedBy:data.reservedBy||null,vehicleNumberPlate:data.vehicleNumberPlate||null}):slot));// If a slot gets reserved, update the free slots list to exclude it\nif(data.isReserved){setFreeSlotsList(prev=>prev.filter(slotNum=>slotNum!==data.slotNumber));}else if(!data.isOccupied){// If a slot gets unreserved and not occupied, add it to free slots\nsetFreeSlotsList(prev=>{if(!prev.includes(data.slotNumber)){return[...prev,data.slotNumber].sort();}return prev;});}});const unsubscribeGate=socketService.subscribeToGateUpdates(data=>{setIsSystemOnline(true);// Mark system as online when any data is received\nconsole.log(\"Gate update received:\",data);setGateStatus(data);});const unsubscribeEntryGate=socketService.subscribeToEntryGateUpdates(data=>{setIsSystemOnline(true);setEntryGateStatus(String(data||'').toUpperCase());});const unsubscribeExitGate=socketService.subscribeToExitGateUpdates(data=>{setIsSystemOnline(true);setExitGateStatus(String(data||'').toUpperCase());});const unsubscribeDevice=socketService.subscribeToDeviceStatus(data=>{setIsSystemOnline(true);// Mark system as online when any data is received\nconsole.log(\"Device status update:\",data);});// Cleanup subscriptions on component unmount\nreturn()=>{unsubscribeSlot();unsubscribeDatabaseSlot();unsubscribeGate();unsubscribeEntryGate();unsubscribeExitGate();unsubscribeDevice();};},[totalSlots]);// Update available slots count whenever realtime slots change\nuseEffect(()=>{const available=realtimeSlots.filter(slot=>!slot.isOccupied&&!slot.isReserved).length;setAvailableSlots(available);},[realtimeSlots]);// Function to determine slot CSS class based on occupancy and reservation status\nconst getSlotClass=slotNumber=>{const slot=realtimeSlots.find(s=>s.slotNumber===slotNumber);if(!slot){// Fallback to old logic if slot not found in realtime data\nreturn freeSlotsList.includes(slotNumber)?\"slot available\":\"slot occupied\";}if(slot.isReserved)return\"slot reserved\";if(slot.isOccupied)return\"slot occupied\";return\"slot available\";};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[showWelcomePopup&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"overlay\",onClick:()=>setShowWelcomePopup(false)}),/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-popup\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to the Intelligent Urban Parking System\"}),/*#__PURE__*/_jsx(\"div\",{className:\"system-status\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"status-indicator \".concat(isSystemOnline?'online':'offline'),children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-dot \".concat(isSystemOnline?'online':'offline')}),\"System \",isSystemOnline?'Online':'Offline']})}),/*#__PURE__*/_jsx(\"button\",{className:\"close-button\",onClick:()=>setShowWelcomePopup(false),children:\"Get Started\"})]})]}),/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Smart Parking System\"}),/*#__PURE__*/_jsx(\"p\",{className:\"subtitle\",children:\"Real-time parking lot monitoring\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"device-status\",children:[\"System:\",\" \",isSystemOnline&&/*#__PURE__*/_jsx(\"span\",{className:\"status-online\",children:\"ONLINE\"})]}),user&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:8},children:[/*#__PURE__*/_jsxs(\"small\",{children:[\"Signed in as \",user.name,\" (\",user.phone,\")\"]}),Array.isArray(user.vehicles)&&user.vehicles.length>0&&/*#__PURE__*/_jsx(\"div\",{style:{marginTop:4},children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Vehicles: \",user.vehicles.map(v=>\"\".concat(v.type,\":\").concat(v.numberPlate)).join(', ')]})}),/*#__PURE__*/_jsx(\"button\",{style:{marginLeft:8},onClick:logout,children:\"Logout\"})]})]}),/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tab-navigation\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"tab-button \".concat(activeTab==='monitor'?'active':''),onClick:()=>setActiveTab('monitor'),children:\"\\uD83D\\uDCCA Live Monitor\"}),/*#__PURE__*/_jsx(\"button\",{className:\"tab-button \".concat(activeTab==='reserve'?'active':''),onClick:()=>setActiveTab('reserve'),children:\"\\uD83D\\uDE97 Reserve Slot\"})]}),activeTab==='monitor'?/*#__PURE__*/_jsxs(\"section\",{className:\"status-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"status-card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Parking Availability\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"availability-display\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"count-display\",children:[/*#__PURE__*/_jsx(\"span\",{id:\"available-count\",children:availableSlots}),/*#__PURE__*/_jsx(\"span\",{className:\"count-label\",children:\"Available\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"count-display\",children:[/*#__PURE__*/_jsx(\"span\",{id:\"total-count\",children:totalSlots}),/*#__PURE__*/_jsx(\"span\",{className:\"count-label\",children:\"Total\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"slots-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Slot Status\"}),/*#__PURE__*/_jsx(\"div\",{className:\"parking-grid\",children:Array.from({length:totalSlots},(_,i)=>i+1).map(slotNum=>/*#__PURE__*/_jsx(\"div\",{className:getSlotClass(slotNum),id:\"slot-\".concat(slotNum),children:slotNum},slotNum))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Gate Status\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"gate-status\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"gate-indicator \".concat(gateStatus===\"OPEN\"?\"open\":\"closed\"),id:\"gate-indicator\"}),/*#__PURE__*/_jsx(\"span\",{id:\"gate-status-text\",children:gateStatus})]}),/*#__PURE__*/_jsx(\"div\",{className:\"gate-info\",style:{marginTop:8},children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Entry: \",entryGateStatus,\" | Exit: \",exitGateStatus]})}),/*#__PURE__*/_jsx(\"div\",{className:\"gate-info\",children:/*#__PURE__*/_jsx(\"p\",{children:\"The gate automatically opens when a vehicle is detected and parking space is available.\"})})]})]}):/*#__PURE__*/_jsx(\"section\",{className:\"reservation-section\",children:/*#__PURE__*/_jsx(SlotReservation,{user:user,realtimeSlots:realtimeSlots})})]}),/*#__PURE__*/_jsxs(\"footer\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\xA9 2025 Smart Parking System\"}),/*#__PURE__*/_jsx(Link,{to:\"/admin\",className:\"admin-link\",children:\"Admin Panel\"})]})]});}","map":{"version":3,"names":["React","useEffect","useState","Link","useNavigate","socketService","SlotReservation","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Index","navigate","user","JSON","parse","localStorage","getItem","_unused","logout","removeItem","availableSlots","setAvailableSlots","totalSlots","gateStatus","setGateStatus","entryGateStatus","setEntryGateStatus","exitGateStatus","setExitGateStatus","freeSlotsList","setFreeSlotsList","isSystemOnline","setIsSystemOnline","showWelcomePopup","setShowWelcomePopup","activeTab","setActiveTab","realtimeSlots","setRealtimeSlots","console","log","initializeSlots","response","fetch","data","json","success","slots","initialSlots","i","push","slotNumber","isOccupied","isReserved","location","concat","slotType","error","unsubscribeSlot","subscribeToSlotUpdates","freeSlots","split","map","Number","length","prevSlots","slot","_objectSpread","includes","unsubscribeDatabaseSlot","subscribeToDatabaseSlotUpdates","reservedBy","vehicleNumberPlate","prev","filter","slotNum","sort","unsubscribeGate","subscribeToGateUpdates","unsubscribeEntryGate","subscribeToEntryGateUpdates","String","toUpperCase","unsubscribeExitGate","subscribeToExitGateUpdates","unsubscribeDevice","subscribeToDeviceStatus","available","getSlotClass","find","s","className","children","onClick","style","marginTop","name","phone","Array","isArray","vehicles","v","type","numberPlate","join","marginLeft","id","from","_","to"],"sources":["C:/Users/nagas/Desktop/Uparkweb/frontend/src/pages/Index.jsx"],"sourcesContent":["// src/pages/Index.jsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport socketService from \"../services/socketService\";\r\nimport SlotReservation from \"../components/SlotReservation\";\r\n\r\nexport default function Index() {\r\n  const navigate = useNavigate();\r\n  const user = (() => {\r\n    try { return JSON.parse(localStorage.getItem('upark_user') || 'null'); } catch { return null; }\r\n  })();\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('upark_token');\r\n    localStorage.removeItem('upark_user');\r\n    navigate('/signup');\r\n  };\r\n  const [availableSlots, setAvailableSlots] = useState(0);\r\n  const [totalSlots] = useState(6);\r\n  const [gateStatus, setGateStatus] = useState(\"CLOSED\");\r\n  const [entryGateStatus, setEntryGateStatus] = useState(\"CLOSED\");\r\n  const [exitGateStatus, setExitGateStatus] = useState(\"CLOSED\");\r\n  const [freeSlotsList, setFreeSlotsList] = useState([]);\r\n  const [isSystemOnline, setIsSystemOnline] = useState(false);\r\n  const [showWelcomePopup, setShowWelcomePopup] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('monitor');\r\n  const [realtimeSlots, setRealtimeSlots] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Index page loaded\");\r\n    \r\n    // Initialize slots by fetching from database\r\n    const initializeSlots = async () => {\r\n      try {\r\n        console.log('Fetching initial slots from database...');\r\n        const response = await fetch('/api/slots');\r\n        const data = await response.json();\r\n        if (data.success && data.slots) {\r\n          setRealtimeSlots(data.slots);\r\n          console.log('Initialized slots from database:', data.slots);\r\n        } else {\r\n          // Fallback to default initialization\r\n          const initialSlots = [];\r\n          for (let i = 1; i <= totalSlots; i++) {\r\n            initialSlots.push({\r\n              slotNumber: i,\r\n              isOccupied: false,\r\n              isReserved: false,\r\n              location: `A${i}`,\r\n              slotType: 'BOTH'\r\n            });\r\n          }\r\n          setRealtimeSlots(initialSlots);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching initial slots:', error);\r\n        // Fallback to default initialization\r\n        const initialSlots = [];\r\n        for (let i = 1; i <= totalSlots; i++) {\r\n          initialSlots.push({\r\n            slotNumber: i,\r\n            isOccupied: false,\r\n            isReserved: false,\r\n            location: `A${i}`,\r\n            slotType: 'BOTH'\r\n          });\r\n        }\r\n        setRealtimeSlots(initialSlots);\r\n      }\r\n    };\r\n    \r\n    initializeSlots();\r\n    \r\n    // Subscribe to real-time updates from the ESP32\r\n    const unsubscribeSlot = socketService.subscribeToSlotUpdates((data) => {\r\n      setIsSystemOnline(true);\r\n      console.log(\"Slot update received:\", data);\r\n      \r\n      let freeSlots = [];\r\n      \r\n      // Handle slot status updates\r\n      if (data === \"FULL\") {\r\n        setAvailableSlots(0);\r\n        setFreeSlotsList([]);\r\n        freeSlots = [];\r\n      } else {\r\n        // Parse comma-separated list of available slots\r\n        freeSlots = data.split(\",\").map(Number);\r\n        setFreeSlotsList(freeSlots);\r\n        setAvailableSlots(freeSlots.length);\r\n      }\r\n      \r\n      // Update realtime slots structure to match hardware data\r\n      // IMPORTANT: Only update isOccupied, preserve reservation status\r\n      setRealtimeSlots(prevSlots => \r\n        prevSlots.map(slot => ({\r\n          ...slot,\r\n          // A slot is occupied if it's not in the free list AND not reserved\r\n          // Reserved slots should not be marked as occupied even if sensor detects something\r\n          isOccupied: !freeSlots.includes(slot.slotNumber) && !slot.isReserved\r\n        }))\r\n      );\r\n    });\r\n    \r\n    // Subscribe to database slot updates (for reservations)\r\n    const unsubscribeDatabaseSlot = socketService.subscribeToDatabaseSlotUpdates((data) => {\r\n      console.log(\"Database slot update received:\", data);\r\n      // Update the realtime slots with reservation info\r\n      setRealtimeSlots(prevSlots => \r\n        prevSlots.map(slot => \r\n          slot.slotNumber === data.slotNumber \r\n            ? { \r\n                ...slot, \r\n                isOccupied: data.isOccupied,\r\n                isReserved: data.isReserved,\r\n                reservedBy: data.reservedBy || null,\r\n                vehicleNumberPlate: data.vehicleNumberPlate || null\r\n              }\r\n            : slot\r\n        )\r\n      );\r\n      \r\n      // If a slot gets reserved, update the free slots list to exclude it\r\n      if (data.isReserved) {\r\n        setFreeSlotsList(prev => prev.filter(slotNum => slotNum !== data.slotNumber));\r\n      } else if (!data.isOccupied) {\r\n        // If a slot gets unreserved and not occupied, add it to free slots\r\n        setFreeSlotsList(prev => {\r\n          if (!prev.includes(data.slotNumber)) {\r\n            return [...prev, data.slotNumber].sort();\r\n          }\r\n          return prev;\r\n        });\r\n      }\r\n    });\r\n    \r\n    const unsubscribeGate = socketService.subscribeToGateUpdates((data) => {\r\n      setIsSystemOnline(true); // Mark system as online when any data is received\r\n      console.log(\"Gate update received:\", data);\r\n      setGateStatus(data);\r\n    });\r\n    const unsubscribeEntryGate = socketService.subscribeToEntryGateUpdates((data) => {\r\n      setIsSystemOnline(true);\r\n      setEntryGateStatus(String(data||'').toUpperCase());\r\n    });\r\n    const unsubscribeExitGate = socketService.subscribeToExitGateUpdates((data) => {\r\n      setIsSystemOnline(true);\r\n      setExitGateStatus(String(data||'').toUpperCase());\r\n    });\r\n    \r\n    const unsubscribeDevice = socketService.subscribeToDeviceStatus((data) => {\r\n      setIsSystemOnline(true); // Mark system as online when any data is received\r\n      console.log(\"Device status update:\", data);\r\n    });\r\n    \r\n    // Cleanup subscriptions on component unmount\r\n    return () => {\r\n      unsubscribeSlot();\r\n      unsubscribeDatabaseSlot();\r\n      unsubscribeGate();\r\n      unsubscribeEntryGate();\r\n      unsubscribeExitGate();\r\n      unsubscribeDevice();\r\n    };\r\n  }, [totalSlots]);\r\n\r\n  // Update available slots count whenever realtime slots change\r\n  useEffect(() => {\r\n    const available = realtimeSlots.filter(slot => !slot.isOccupied && !slot.isReserved).length;\r\n    setAvailableSlots(available);\r\n  }, [realtimeSlots]);\r\n\r\n  // Function to determine slot CSS class based on occupancy and reservation status\r\n  const getSlotClass = (slotNumber) => {\r\n    const slot = realtimeSlots.find(s => s.slotNumber === slotNumber);\r\n    if (!slot) {\r\n      // Fallback to old logic if slot not found in realtime data\r\n      return freeSlotsList.includes(slotNumber) ? \"slot available\" : \"slot occupied\";\r\n    }\r\n    \r\n    if (slot.isReserved) return \"slot reserved\";\r\n    if (slot.isOccupied) return \"slot occupied\";\r\n    return \"slot available\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {/* Welcome Popup */}\r\n      {showWelcomePopup && (\r\n        <>\r\n          <div className=\"overlay\" onClick={() => setShowWelcomePopup(false)} />\r\n          <div className=\"welcome-popup\">\r\n            <h2>Welcome to the Intelligent Urban Parking System</h2>\r\n            <div className=\"system-status\">\r\n              <div className={`status-indicator ${isSystemOnline ? 'online' : 'offline'}`}>\r\n                <span className={`status-dot ${isSystemOnline ? 'online' : 'offline'}`}></span>\r\n                System {isSystemOnline ? 'Online' : 'Offline'}\r\n              </div>\r\n            </div>\r\n            <button className=\"close-button\" onClick={() => setShowWelcomePopup(false)}>\r\n              Get Started\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      <header>\r\n        <h1>Smart Parking System</h1>\r\n        <p className=\"subtitle\">Real-time parking lot monitoring</p>\r\n        <div className=\"device-status\">\r\n          System:{\" \"}\r\n          {isSystemOnline && (\r\n            <span className=\"status-online\">ONLINE</span>\r\n          )}\r\n        </div>\r\n        {user && (\r\n          <div style={{ marginTop: 8 }}>\r\n            <small>Signed in as {user.name} ({user.phone})</small>\r\n            {Array.isArray(user.vehicles) && user.vehicles.length > 0 && (\r\n              <div style={{ marginTop: 4 }}>\r\n                <small>Vehicles: {user.vehicles.map(v => `${v.type}:${v.numberPlate}`).join(', ')}</small>\r\n              </div>\r\n            )}\r\n            <button style={{ marginLeft: 8 }} onClick={logout}>Logout</button>\r\n          </div>\r\n        )}\r\n      </header>\r\n\r\n      <main>\r\n        {/* Tab Navigation */}\r\n        <div className=\"tab-navigation\">\r\n          <button \r\n            className={`tab-button ${activeTab === 'monitor' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('monitor')}\r\n          >\r\n            📊 Live Monitor\r\n          </button>\r\n          <button \r\n            className={`tab-button ${activeTab === 'reserve' ? 'active' : ''}`}\r\n            onClick={() => setActiveTab('reserve')}\r\n          >\r\n            🚗 Reserve Slot\r\n          </button>\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        {activeTab === 'monitor' ? (\r\n          <section className=\"status-section\">\r\n            <div className=\"status-card\">\r\n              <h2>Parking Availability</h2>\r\n              <div className=\"availability-display\">\r\n                <div className=\"count-display\">\r\n                  <span id=\"available-count\">{availableSlots}</span>\r\n                  <span className=\"count-label\">Available</span>\r\n                </div>\r\n                <div className=\"count-display\">\r\n                  <span id=\"total-count\">{totalSlots}</span>\r\n                  <span className=\"count-label\">Total</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"slots-container\">\r\n                <h3>Slot Status</h3>\r\n                <div className=\"parking-grid\">\r\n                  {Array.from({length: totalSlots}, (_, i) => i + 1).map(slotNum => (\r\n                    <div\r\n                      key={slotNum}\r\n                      className={getSlotClass(slotNum)}\r\n                      id={`slot-${slotNum}`}\r\n                    >\r\n                      {slotNum}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"status-card\">\r\n              <h2>Gate Status</h2>\r\n              <div className=\"gate-status\">\r\n                <div \r\n                  className={`gate-indicator ${gateStatus === \"OPEN\" ? \"open\" : \"closed\"}`} \r\n                  id=\"gate-indicator\"\r\n                ></div>\r\n                <span id=\"gate-status-text\">{gateStatus}</span>\r\n              </div>\r\n              <div className=\"gate-info\" style={{marginTop:8}}>\r\n                <small>Entry: {entryGateStatus} | Exit: {exitGateStatus}</small>\r\n              </div>\r\n              <div className=\"gate-info\">\r\n                <p>\r\n                  The gate automatically opens when a vehicle is detected and parking space is available.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        ) : (\r\n          <section className=\"reservation-section\">\r\n            <SlotReservation user={user} realtimeSlots={realtimeSlots} />\r\n          </section>\r\n        )}\r\n      </main>\r\n\r\n      <footer>\r\n        <p>&copy; 2025 Smart Parking System</p>\r\n        <Link to=\"/admin\" className=\"admin-link\">Admin Panel</Link>\r\n      </footer>\r\n    </div>\r\n  );\r\n}"],"mappings":"6HAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,aAAa,CACpB,OAASC,IAAI,CAAEC,WAAW,KAAQ,kBAAkB,CACpD,MAAO,CAAAC,aAAa,KAAM,2BAA2B,CACrD,MAAO,CAAAC,eAAe,KAAM,+BAA+B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE5D,cAAe,SAAS,CAAAC,KAAKA,CAAA,CAAG,CAC9B,KAAM,CAAAC,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAW,IAAI,CAAG,CAAC,IAAM,CAClB,GAAI,CAAE,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAI,MAAM,CAAC,CAAE,CAAE,MAAAC,OAAA,CAAM,CAAE,MAAO,KAAI,CAAE,CAChG,CAAC,EAAE,CAAC,CAEJ,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnBH,YAAY,CAACI,UAAU,CAAC,aAAa,CAAC,CACtCJ,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC,CACrCR,QAAQ,CAAC,SAAS,CAAC,CACrB,CAAC,CACD,KAAM,CAACS,cAAc,CAAEC,iBAAiB,CAAC,CAAGtB,QAAQ,CAAC,CAAC,CAAC,CACvD,KAAM,CAACuB,UAAU,CAAC,CAAGvB,QAAQ,CAAC,CAAC,CAAC,CAChC,KAAM,CAACwB,UAAU,CAAEC,aAAa,CAAC,CAAGzB,QAAQ,CAAC,QAAQ,CAAC,CACtD,KAAM,CAAC0B,eAAe,CAAEC,kBAAkB,CAAC,CAAG3B,QAAQ,CAAC,QAAQ,CAAC,CAChE,KAAM,CAAC4B,cAAc,CAAEC,iBAAiB,CAAC,CAAG7B,QAAQ,CAAC,QAAQ,CAAC,CAC9D,KAAM,CAAC8B,aAAa,CAAEC,gBAAgB,CAAC,CAAG/B,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACgC,cAAc,CAAEC,iBAAiB,CAAC,CAAGjC,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACkC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGnC,QAAQ,CAAC,IAAI,CAAC,CAC9D,KAAM,CAACoC,SAAS,CAAEC,YAAY,CAAC,CAAGrC,QAAQ,CAAC,SAAS,CAAC,CACrD,KAAM,CAACsC,aAAa,CAAEC,gBAAgB,CAAC,CAAGvC,QAAQ,CAAC,EAAE,CAAC,CAEtDD,SAAS,CAAC,IAAM,CACdyC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAEhC;AACA,KAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACFF,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CACtD,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,YAAY,CAAC,CAC1C,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACE,OAAO,EAAIF,IAAI,CAACG,KAAK,CAAE,CAC9BT,gBAAgB,CAACM,IAAI,CAACG,KAAK,CAAC,CAC5BR,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAEI,IAAI,CAACG,KAAK,CAAC,CAC7D,CAAC,IAAM,CACL;AACA,KAAM,CAAAC,YAAY,CAAG,EAAE,CACvB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI3B,UAAU,CAAE2B,CAAC,EAAE,CAAE,CACpCD,YAAY,CAACE,IAAI,CAAC,CAChBC,UAAU,CAAEF,CAAC,CACbG,UAAU,CAAE,KAAK,CACjBC,UAAU,CAAE,KAAK,CACjBC,QAAQ,KAAAC,MAAA,CAAMN,CAAC,CAAE,CACjBO,QAAQ,CAAE,MACZ,CAAC,CAAC,CACJ,CACAlB,gBAAgB,CAACU,YAAY,CAAC,CAChC,CACF,CAAE,MAAOS,KAAK,CAAE,CACdlB,OAAO,CAACkB,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD;AACA,KAAM,CAAAT,YAAY,CAAG,EAAE,CACvB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI3B,UAAU,CAAE2B,CAAC,EAAE,CAAE,CACpCD,YAAY,CAACE,IAAI,CAAC,CAChBC,UAAU,CAAEF,CAAC,CACbG,UAAU,CAAE,KAAK,CACjBC,UAAU,CAAE,KAAK,CACjBC,QAAQ,KAAAC,MAAA,CAAMN,CAAC,CAAE,CACjBO,QAAQ,CAAE,MACZ,CAAC,CAAC,CACJ,CACAlB,gBAAgB,CAACU,YAAY,CAAC,CAChC,CACF,CAAC,CAEDP,eAAe,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAiB,eAAe,CAAGxD,aAAa,CAACyD,sBAAsB,CAAEf,IAAI,EAAK,CACrEZ,iBAAiB,CAAC,IAAI,CAAC,CACvBO,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEI,IAAI,CAAC,CAE1C,GAAI,CAAAgB,SAAS,CAAG,EAAE,CAElB;AACA,GAAIhB,IAAI,GAAK,MAAM,CAAE,CACnBvB,iBAAiB,CAAC,CAAC,CAAC,CACpBS,gBAAgB,CAAC,EAAE,CAAC,CACpB8B,SAAS,CAAG,EAAE,CAChB,CAAC,IAAM,CACL;AACAA,SAAS,CAAGhB,IAAI,CAACiB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CACvCjC,gBAAgB,CAAC8B,SAAS,CAAC,CAC3BvC,iBAAiB,CAACuC,SAAS,CAACI,MAAM,CAAC,CACrC,CAEA;AACA;AACA1B,gBAAgB,CAAC2B,SAAS,EACxBA,SAAS,CAACH,GAAG,CAACI,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACbD,IAAI,MACP;AACA;AACAd,UAAU,CAAE,CAACQ,SAAS,CAACQ,QAAQ,CAACF,IAAI,CAACf,UAAU,CAAC,EAAI,CAACe,IAAI,CAACb,UAAU,EACpE,CACJ,CAAC,CACH,CAAC,CAAC,CAEF;AACA,KAAM,CAAAgB,uBAAuB,CAAGnE,aAAa,CAACoE,8BAA8B,CAAE1B,IAAI,EAAK,CACrFL,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEI,IAAI,CAAC,CACnD;AACAN,gBAAgB,CAAC2B,SAAS,EACxBA,SAAS,CAACH,GAAG,CAACI,IAAI,EAChBA,IAAI,CAACf,UAAU,GAAKP,IAAI,CAACO,UAAU,CAAAgB,aAAA,CAAAA,aAAA,IAE1BD,IAAI,MACPd,UAAU,CAAER,IAAI,CAACQ,UAAU,CAC3BC,UAAU,CAAET,IAAI,CAACS,UAAU,CAC3BkB,UAAU,CAAE3B,IAAI,CAAC2B,UAAU,EAAI,IAAI,CACnCC,kBAAkB,CAAE5B,IAAI,CAAC4B,kBAAkB,EAAI,IAAI,GAErDN,IACN,CACF,CAAC,CAED;AACA,GAAItB,IAAI,CAACS,UAAU,CAAE,CACnBvB,gBAAgB,CAAC2C,IAAI,EAAIA,IAAI,CAACC,MAAM,CAACC,OAAO,EAAIA,OAAO,GAAK/B,IAAI,CAACO,UAAU,CAAC,CAAC,CAC/E,CAAC,IAAM,IAAI,CAACP,IAAI,CAACQ,UAAU,CAAE,CAC3B;AACAtB,gBAAgB,CAAC2C,IAAI,EAAI,CACvB,GAAI,CAACA,IAAI,CAACL,QAAQ,CAACxB,IAAI,CAACO,UAAU,CAAC,CAAE,CACnC,MAAO,CAAC,GAAGsB,IAAI,CAAE7B,IAAI,CAACO,UAAU,CAAC,CAACyB,IAAI,CAAC,CAAC,CAC1C,CACA,MAAO,CAAAH,IAAI,CACb,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF,KAAM,CAAAI,eAAe,CAAG3E,aAAa,CAAC4E,sBAAsB,CAAElC,IAAI,EAAK,CACrEZ,iBAAiB,CAAC,IAAI,CAAC,CAAE;AACzBO,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEI,IAAI,CAAC,CAC1CpB,aAAa,CAACoB,IAAI,CAAC,CACrB,CAAC,CAAC,CACF,KAAM,CAAAmC,oBAAoB,CAAG7E,aAAa,CAAC8E,2BAA2B,CAAEpC,IAAI,EAAK,CAC/EZ,iBAAiB,CAAC,IAAI,CAAC,CACvBN,kBAAkB,CAACuD,MAAM,CAACrC,IAAI,EAAE,EAAE,CAAC,CAACsC,WAAW,CAAC,CAAC,CAAC,CACpD,CAAC,CAAC,CACF,KAAM,CAAAC,mBAAmB,CAAGjF,aAAa,CAACkF,0BAA0B,CAAExC,IAAI,EAAK,CAC7EZ,iBAAiB,CAAC,IAAI,CAAC,CACvBJ,iBAAiB,CAACqD,MAAM,CAACrC,IAAI,EAAE,EAAE,CAAC,CAACsC,WAAW,CAAC,CAAC,CAAC,CACnD,CAAC,CAAC,CAEF,KAAM,CAAAG,iBAAiB,CAAGnF,aAAa,CAACoF,uBAAuB,CAAE1C,IAAI,EAAK,CACxEZ,iBAAiB,CAAC,IAAI,CAAC,CAAE;AACzBO,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEI,IAAI,CAAC,CAC5C,CAAC,CAAC,CAEF;AACA,MAAO,IAAM,CACXc,eAAe,CAAC,CAAC,CACjBW,uBAAuB,CAAC,CAAC,CACzBQ,eAAe,CAAC,CAAC,CACjBE,oBAAoB,CAAC,CAAC,CACtBI,mBAAmB,CAAC,CAAC,CACrBE,iBAAiB,CAAC,CAAC,CACrB,CAAC,CACH,CAAC,CAAE,CAAC/D,UAAU,CAAC,CAAC,CAEhB;AACAxB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAyF,SAAS,CAAGlD,aAAa,CAACqC,MAAM,CAACR,IAAI,EAAI,CAACA,IAAI,CAACd,UAAU,EAAI,CAACc,IAAI,CAACb,UAAU,CAAC,CAACW,MAAM,CAC3F3C,iBAAiB,CAACkE,SAAS,CAAC,CAC9B,CAAC,CAAE,CAAClD,aAAa,CAAC,CAAC,CAEnB;AACA,KAAM,CAAAmD,YAAY,CAAIrC,UAAU,EAAK,CACnC,KAAM,CAAAe,IAAI,CAAG7B,aAAa,CAACoD,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACvC,UAAU,GAAKA,UAAU,CAAC,CACjE,GAAI,CAACe,IAAI,CAAE,CACT;AACA,MAAO,CAAArC,aAAa,CAACuC,QAAQ,CAACjB,UAAU,CAAC,CAAG,gBAAgB,CAAG,eAAe,CAChF,CAEA,GAAIe,IAAI,CAACb,UAAU,CAAE,MAAO,eAAe,CAC3C,GAAIa,IAAI,CAACd,UAAU,CAAE,MAAO,eAAe,CAC3C,MAAO,gBAAgB,CACzB,CAAC,CAED,mBACE7C,KAAA,QAAKoF,SAAS,CAAC,WAAW,CAAAC,QAAA,EAEvB3D,gBAAgB,eACf1B,KAAA,CAAAE,SAAA,EAAAmF,QAAA,eACEvF,IAAA,QAAKsF,SAAS,CAAC,SAAS,CAACE,OAAO,CAAEA,CAAA,GAAM3D,mBAAmB,CAAC,KAAK,CAAE,CAAE,CAAC,cACtE3B,KAAA,QAAKoF,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BvF,IAAA,OAAAuF,QAAA,CAAI,iDAA+C,CAAI,CAAC,cACxDvF,IAAA,QAAKsF,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5BrF,KAAA,QAAKoF,SAAS,qBAAApC,MAAA,CAAsBxB,cAAc,CAAG,QAAQ,CAAG,SAAS,CAAG,CAAA6D,QAAA,eAC1EvF,IAAA,SAAMsF,SAAS,eAAApC,MAAA,CAAgBxB,cAAc,CAAG,QAAQ,CAAG,SAAS,CAAG,CAAO,CAAC,UACxE,CAACA,cAAc,CAAG,QAAQ,CAAG,SAAS,EAC1C,CAAC,CACH,CAAC,cACN1B,IAAA,WAAQsF,SAAS,CAAC,cAAc,CAACE,OAAO,CAAEA,CAAA,GAAM3D,mBAAmB,CAAC,KAAK,CAAE,CAAA0D,QAAA,CAAC,aAE5E,CAAQ,CAAC,EACN,CAAC,EACN,CACH,cAEDrF,KAAA,WAAAqF,QAAA,eACEvF,IAAA,OAAAuF,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7BvF,IAAA,MAAGsF,SAAS,CAAC,UAAU,CAAAC,QAAA,CAAC,kCAAgC,CAAG,CAAC,cAC5DrF,KAAA,QAAKoF,SAAS,CAAC,eAAe,CAAAC,QAAA,EAAC,SACtB,CAAC,GAAG,CACV7D,cAAc,eACb1B,IAAA,SAAMsF,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,QAAM,CAAM,CAC7C,EACE,CAAC,CACLhF,IAAI,eACHL,KAAA,QAAKuF,KAAK,CAAE,CAAEC,SAAS,CAAE,CAAE,CAAE,CAAAH,QAAA,eAC3BrF,KAAA,UAAAqF,QAAA,EAAO,eAAa,CAAChF,IAAI,CAACoF,IAAI,CAAC,IAAE,CAACpF,IAAI,CAACqF,KAAK,CAAC,GAAC,EAAO,CAAC,CACrDC,KAAK,CAACC,OAAO,CAACvF,IAAI,CAACwF,QAAQ,CAAC,EAAIxF,IAAI,CAACwF,QAAQ,CAACpC,MAAM,CAAG,CAAC,eACvD3D,IAAA,QAAKyF,KAAK,CAAE,CAAEC,SAAS,CAAE,CAAE,CAAE,CAAAH,QAAA,cAC3BrF,KAAA,UAAAqF,QAAA,EAAO,YAAU,CAAChF,IAAI,CAACwF,QAAQ,CAACtC,GAAG,CAACuC,CAAC,KAAA9C,MAAA,CAAO8C,CAAC,CAACC,IAAI,MAAA/C,MAAA,CAAI8C,CAAC,CAACE,WAAW,CAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAQ,CAAC,CACvF,CACN,cACDnG,IAAA,WAAQyF,KAAK,CAAE,CAAEW,UAAU,CAAE,CAAE,CAAE,CAACZ,OAAO,CAAE3E,MAAO,CAAA0E,QAAA,CAAC,QAAM,CAAQ,CAAC,EAC/D,CACN,EACK,CAAC,cAETrF,KAAA,SAAAqF,QAAA,eAEErF,KAAA,QAAKoF,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BvF,IAAA,WACEsF,SAAS,eAAApC,MAAA,CAAgBpB,SAAS,GAAK,SAAS,CAAG,QAAQ,CAAG,EAAE,CAAG,CACnE0D,OAAO,CAAEA,CAAA,GAAMzD,YAAY,CAAC,SAAS,CAAE,CAAAwD,QAAA,CACxC,2BAED,CAAQ,CAAC,cACTvF,IAAA,WACEsF,SAAS,eAAApC,MAAA,CAAgBpB,SAAS,GAAK,SAAS,CAAG,QAAQ,CAAG,EAAE,CAAG,CACnE0D,OAAO,CAAEA,CAAA,GAAMzD,YAAY,CAAC,SAAS,CAAE,CAAAwD,QAAA,CACxC,2BAED,CAAQ,CAAC,EACN,CAAC,CAGLzD,SAAS,GAAK,SAAS,cACtB5B,KAAA,YAASoF,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eACjCrF,KAAA,QAAKoF,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BvF,IAAA,OAAAuF,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7BrF,KAAA,QAAKoF,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACnCrF,KAAA,QAAKoF,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BvF,IAAA,SAAMqG,EAAE,CAAC,iBAAiB,CAAAd,QAAA,CAAExE,cAAc,CAAO,CAAC,cAClDf,IAAA,SAAMsF,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,WAAS,CAAM,CAAC,EAC3C,CAAC,cACNrF,KAAA,QAAKoF,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BvF,IAAA,SAAMqG,EAAE,CAAC,aAAa,CAAAd,QAAA,CAAEtE,UAAU,CAAO,CAAC,cAC1CjB,IAAA,SAAMsF,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,OAAK,CAAM,CAAC,EACvC,CAAC,EACH,CAAC,cAENrF,KAAA,QAAKoF,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BvF,IAAA,OAAAuF,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBvF,IAAA,QAAKsF,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1BM,KAAK,CAACS,IAAI,CAAC,CAAC3C,MAAM,CAAE1C,UAAU,CAAC,CAAE,CAACsF,CAAC,CAAE3D,CAAC,GAAKA,CAAC,CAAG,CAAC,CAAC,CAACa,GAAG,CAACa,OAAO,eAC5DtE,IAAA,QAEEsF,SAAS,CAAEH,YAAY,CAACb,OAAO,CAAE,CACjC+B,EAAE,SAAAnD,MAAA,CAAUoB,OAAO,CAAG,CAAAiB,QAAA,CAErBjB,OAAO,EAJHA,OAKF,CACN,CAAC,CACC,CAAC,EACH,CAAC,EACH,CAAC,cAENpE,KAAA,QAAKoF,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BvF,IAAA,OAAAuF,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBrF,KAAA,QAAKoF,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BvF,IAAA,QACEsF,SAAS,mBAAApC,MAAA,CAAoBhC,UAAU,GAAK,MAAM,CAAG,MAAM,CAAG,QAAQ,CAAG,CACzEmF,EAAE,CAAC,gBAAgB,CACf,CAAC,cACPrG,IAAA,SAAMqG,EAAE,CAAC,kBAAkB,CAAAd,QAAA,CAAErE,UAAU,CAAO,CAAC,EAC5C,CAAC,cACNlB,IAAA,QAAKsF,SAAS,CAAC,WAAW,CAACG,KAAK,CAAE,CAACC,SAAS,CAAC,CAAC,CAAE,CAAAH,QAAA,cAC9CrF,KAAA,UAAAqF,QAAA,EAAO,SAAO,CAACnE,eAAe,CAAC,WAAS,CAACE,cAAc,EAAQ,CAAC,CAC7D,CAAC,cACNtB,IAAA,QAAKsF,SAAS,CAAC,WAAW,CAAAC,QAAA,cACxBvF,IAAA,MAAAuF,QAAA,CAAG,yFAEH,CAAG,CAAC,CACD,CAAC,EACH,CAAC,EACC,CAAC,cAEVvF,IAAA,YAASsF,SAAS,CAAC,qBAAqB,CAAAC,QAAA,cACtCvF,IAAA,CAACF,eAAe,EAACS,IAAI,CAAEA,IAAK,CAACyB,aAAa,CAAEA,aAAc,CAAE,CAAC,CACtD,CACV,EACG,CAAC,cAEP9B,KAAA,WAAAqF,QAAA,eACEvF,IAAA,MAAAuF,QAAA,CAAG,gCAAgC,CAAG,CAAC,cACvCvF,IAAA,CAACL,IAAI,EAAC6G,EAAE,CAAC,QAAQ,CAAClB,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,aAAW,CAAM,CAAC,EACrD,CAAC,EACN,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}