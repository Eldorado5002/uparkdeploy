{"ast":null,"code":"// src/services/socketService.js\nimport{io}from'socket.io-client';// Connect to the server (adjust URL based on your deployment)\nconst SOCKET_URL=process.env.REACT_APP_BACKEND_URL||'http://localhost:5000';const socket=io(SOCKET_URL);// Socket connection events\nsocket.on('connect',()=>{console.log('Connected to socket server');});socket.on('disconnect',()=>{console.log('Disconnected from socket server');});socket.on('connect_error',error=>{console.error('Socket connection error:',error);});// API for sending commands to the ESP32\nconst socketService={// Subscribe to real-time updates\nsubscribeToSlotUpdates:callback=>{socket.on('slot_update',callback);return()=>socket.off('slot_update',callback);},// Legacy single gate status\nsubscribeToGateUpdates:callback=>{socket.on('gate_update',callback);return()=>socket.off('gate_update',callback);},// New: entry/exit gate statuses\nsubscribeToEntryGateUpdates:callback=>{socket.on('entry_gate_update',callback);return()=>socket.off('entry_gate_update',callback);},subscribeToExitGateUpdates:callback=>{socket.on('exit_gate_update',callback);return()=>socket.off('exit_gate_update',callback);},subscribeToDeviceStatus:callback=>{socket.on('device_status',callback);return()=>socket.off('device_status',callback);},// Subscribe to database slot updates (when hardware data updates the database)\nsubscribeToDatabaseSlotUpdates:callback=>{socket.on('database_slot_update',callback);return()=>socket.off('database_slot_update',callback);},// Control functions\nopenGate:()=>{socket.emit('control_gate','OPEN');},closeGate:()=>{socket.emit('control_gate','CLOSE');},// New granular gate controls\nopenEntryGate:()=>socket.emit('control_entry_gate','OPEN'),closeEntryGate:()=>socket.emit('control_entry_gate','CLOSE'),openExitGate:()=>socket.emit('control_exit_gate','OPEN'),closeExitGate:()=>socket.emit('control_exit_gate','CLOSE'),// Admin override: set slot state\nadminOverrideSlot:_ref=>{let{slotNumber,state}=_ref;socket.emit('admin_override_slot',{slotNumber,state});},// Simulation functions (for testing without actual vehicle detection)\nsimulateVehicleDetected:()=>{socket.emit('simulate_vehicle','DETECTED');},simulateVehicleAway:()=>{socket.emit('simulate_vehicle','NONE');}};export default socketService;","map":{"version":3,"names":["io","SOCKET_URL","process","env","REACT_APP_BACKEND_URL","socket","on","console","log","error","socketService","subscribeToSlotUpdates","callback","off","subscribeToGateUpdates","subscribeToEntryGateUpdates","subscribeToExitGateUpdates","subscribeToDeviceStatus","subscribeToDatabaseSlotUpdates","openGate","emit","closeGate","openEntryGate","closeEntryGate","openExitGate","closeExitGate","adminOverrideSlot","_ref","slotNumber","state","simulateVehicleDetected","simulateVehicleAway"],"sources":["C:/Users/nagas/Desktop/Uparkweb/frontend/src/services/socketService.js"],"sourcesContent":["// src/services/socketService.js\r\nimport { io } from 'socket.io-client';\r\n\r\n// Connect to the server (adjust URL based on your deployment)\r\nconst SOCKET_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\n// Socket connection events\r\nsocket.on('connect', () => {\r\n  console.log('Connected to socket server');\r\n});\r\n\r\nsocket.on('disconnect', () => {\r\n  console.log('Disconnected from socket server');\r\n});\r\n\r\nsocket.on('connect_error', (error) => {\r\n  console.error('Socket connection error:', error);\r\n});\r\n\r\n// API for sending commands to the ESP32\r\nconst socketService = {\r\n  // Subscribe to real-time updates\r\n  subscribeToSlotUpdates: (callback) => {\r\n    socket.on('slot_update', callback);\r\n    return () => socket.off('slot_update', callback);\r\n  },\r\n  \r\n  // Legacy single gate status\r\n  subscribeToGateUpdates: (callback) => {\r\n    socket.on('gate_update', callback);\r\n    return () => socket.off('gate_update', callback);\r\n  },\r\n  // New: entry/exit gate statuses\r\n  subscribeToEntryGateUpdates: (callback) => {\r\n    socket.on('entry_gate_update', callback);\r\n    return () => socket.off('entry_gate_update', callback);\r\n  },\r\n  subscribeToExitGateUpdates: (callback) => {\r\n    socket.on('exit_gate_update', callback);\r\n    return () => socket.off('exit_gate_update', callback);\r\n  },\r\n  \r\n  subscribeToDeviceStatus: (callback) => {\r\n    socket.on('device_status', callback);\r\n    return () => socket.off('device_status', callback);\r\n  },\r\n  \r\n  // Subscribe to database slot updates (when hardware data updates the database)\r\n  subscribeToDatabaseSlotUpdates: (callback) => {\r\n    socket.on('database_slot_update', callback);\r\n    return () => socket.off('database_slot_update', callback);\r\n  },\r\n  \r\n  // Control functions\r\n  openGate: () => {\r\n    socket.emit('control_gate', 'OPEN');\r\n  },\r\n  \r\n  closeGate: () => {\r\n    socket.emit('control_gate', 'CLOSE');\r\n  },\r\n  // New granular gate controls\r\n  openEntryGate: () => socket.emit('control_entry_gate', 'OPEN'),\r\n  closeEntryGate: () => socket.emit('control_entry_gate', 'CLOSE'),\r\n  openExitGate: () => socket.emit('control_exit_gate', 'OPEN'),\r\n  closeExitGate: () => socket.emit('control_exit_gate', 'CLOSE'),\r\n\r\n  // Admin override: set slot state\r\n  adminOverrideSlot: ({ slotNumber, state }) => {\r\n    socket.emit('admin_override_slot', { slotNumber, state });\r\n  },\r\n  \r\n  // Simulation functions (for testing without actual vehicle detection)\r\n  simulateVehicleDetected: () => {\r\n    socket.emit('simulate_vehicle', 'DETECTED');\r\n  },\r\n  \r\n  simulateVehicleAway: () => {\r\n    socket.emit('simulate_vehicle', 'NONE');\r\n  }\r\n};\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}