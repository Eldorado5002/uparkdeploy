{"ast":null,"code":"// src/services/api.js\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\nexport async function requestOtp({\n  name,\n  phone\n}) {\n  const res = await fetch(`${API_BASE}/api/auth/request-otp`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      phone\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) throw new Error(data.error || 'Failed to request OTP');\n  return data; // { success, expiresAt, devCode? }\n}\nexport async function verifyOtp({\n  phone,\n  code\n}) {\n  const res = await fetch(`${API_BASE}/api/auth/verify-otp`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      phone,\n      code\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) throw new Error(data.error || 'Failed to verify OTP');\n  return data; // { success, user, token }\n}\nexport async function checkPhone({\n  phone\n}) {\n  const res = await fetch(`${API_BASE}/api/auth/check-phone`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      phone\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) throw new Error(data.error || 'Failed to check phone');\n  return data; // { exists, user?, token? }\n}\nexport async function updateVehicles({\n  phone,\n  vehicles\n}) {\n  const res = await fetch(`${API_BASE}/api/users/update-vehicles`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      phone,\n      vehicles\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) throw new Error(data.error || 'Failed to update vehicles');\n  return data; // { success, user }\n}","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_BACKEND_URL","requestOtp","name","phone","res","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","verifyOtp","code","checkPhone","updateVehicles","vehicles"],"sources":["C:/Users/nagas/Desktop/Uparkweb/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\r\n\r\nexport async function requestOtp({ name, phone }) {\r\n  const res = await fetch(`${API_BASE}/api/auth/request-otp`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ name, phone }),\r\n  });\r\n  const data = await res.json();\r\n  if (!res.ok) throw new Error(data.error || 'Failed to request OTP');\r\n  return data; // { success, expiresAt, devCode? }\r\n}\r\n\r\nexport async function verifyOtp({ phone, code }) {\r\n  const res = await fetch(`${API_BASE}/api/auth/verify-otp`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ phone, code }),\r\n  });\r\n  const data = await res.json();\r\n  if (!res.ok) throw new Error(data.error || 'Failed to verify OTP');\r\n  return data; // { success, user, token }\r\n}\r\n\r\nexport async function checkPhone({ phone }) {\r\n  const res = await fetch(`${API_BASE}/api/auth/check-phone`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ phone }),\r\n  });\r\n  const data = await res.json();\r\n  if (!res.ok) throw new Error(data.error || 'Failed to check phone');\r\n  return data; // { exists, user?, token? }\r\n}\r\n\r\nexport async function updateVehicles({ phone, vehicles }) {\r\n  const res = await fetch(`${API_BASE}/api/users/update-vehicles`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ phone, vehicles }),\r\n  });\r\n  const data = await res.json();\r\n  if (!res.ok) throw new Error(data.error || 'Failed to update vehicles');\r\n  return data; // { success, user }\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;AAE7E,OAAO,eAAeC,UAAUA,CAAC;EAAEC,IAAI;EAAEC;AAAM,CAAC,EAAE;EAChD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,uBAAuB,EAAE;IAC1DS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,IAAI;MAAEC;IAAM,CAAC;EACtC,CAAC,CAAC;EACF,MAAMQ,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uBAAuB,CAAC;EACnE,OAAOJ,IAAI,CAAC,CAAC;AACf;AAEA,OAAO,eAAeK,SAASA,CAAC;EAAEb,KAAK;EAAEc;AAAK,CAAC,EAAE;EAC/C,MAAMb,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,sBAAsB,EAAE;IACzDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEc;IAAK,CAAC;EACtC,CAAC,CAAC;EACF,MAAMN,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,sBAAsB,CAAC;EAClE,OAAOJ,IAAI,CAAC,CAAC;AACf;AAEA,OAAO,eAAeO,UAAUA,CAAC;EAAEf;AAAM,CAAC,EAAE;EAC1C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,uBAAuB,EAAE;IAC1DS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAM,CAAC;EAChC,CAAC,CAAC;EACF,MAAMQ,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uBAAuB,CAAC;EACnE,OAAOJ,IAAI,CAAC,CAAC;AACf;AAEA,OAAO,eAAeQ,cAAcA,CAAC;EAAEhB,KAAK;EAAEiB;AAAS,CAAC,EAAE;EACxD,MAAMhB,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,4BAA4B,EAAE;IAC/DS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEiB;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,MAAMT,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,2BAA2B,CAAC;EACvE,OAAOJ,IAAI,CAAC,CAAC;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}