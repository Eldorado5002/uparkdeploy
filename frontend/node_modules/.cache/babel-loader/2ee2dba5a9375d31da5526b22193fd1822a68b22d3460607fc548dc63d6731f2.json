{"ast":null,"code":"// src/services/socketService.js\nimport { io } from 'socket.io-client';\n\n// Connect to the server (adjust URL based on your deployment)\nconst SOCKET_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\nconst socket = io(SOCKET_URL);\n\n// Socket connection events\nsocket.on('connect', () => {\n  console.log('Connected to socket server');\n});\nsocket.on('disconnect', () => {\n  console.log('Disconnected from socket server');\n});\nsocket.on('connect_error', error => {\n  console.error('Socket connection error:', error);\n});\n\n// API for sending commands to the ESP32\nconst socketService = {\n  // Subscribe to real-time updates\n  subscribeToSlotUpdates: callback => {\n    socket.on('slot_update', callback);\n    return () => socket.off('slot_update', callback);\n  },\n  // Legacy single gate status\n  subscribeToGateUpdates: callback => {\n    socket.on('gate_update', callback);\n    return () => socket.off('gate_update', callback);\n  },\n  // New: entry/exit gate statuses\n  subscribeToEntryGateUpdates: callback => {\n    socket.on('entry_gate_update', callback);\n    return () => socket.off('entry_gate_update', callback);\n  },\n  subscribeToExitGateUpdates: callback => {\n    socket.on('exit_gate_update', callback);\n    return () => socket.off('exit_gate_update', callback);\n  },\n  subscribeToDeviceStatus: callback => {\n    socket.on('device_status', callback);\n    return () => socket.off('device_status', callback);\n  },\n  // Subscribe to database slot updates (when hardware data updates the database)\n  subscribeToDatabaseSlotUpdates: callback => {\n    socket.on('database_slot_update', callback);\n    return () => socket.off('database_slot_update', callback);\n  },\n  // Control functions\n  openGate: () => {\n    socket.emit('control_gate', 'OPEN');\n  },\n  closeGate: () => {\n    socket.emit('control_gate', 'CLOSE');\n  },\n  // New granular gate controls\n  openEntryGate: () => socket.emit('control_entry_gate', 'OPEN'),\n  closeEntryGate: () => socket.emit('control_entry_gate', 'CLOSE'),\n  openExitGate: () => socket.emit('control_exit_gate', 'OPEN'),\n  closeExitGate: () => socket.emit('control_exit_gate', 'CLOSE'),\n  // Admin override: set slot state\n  adminOverrideSlot: ({\n    slotNumber,\n    state\n  }) => {\n    socket.emit('admin_override_slot', {\n      slotNumber,\n      state\n    });\n  },\n  // Simulation functions (for testing without actual vehicle detection)\n  simulateVehicleDetected: () => {\n    socket.emit('simulate_vehicle', 'DETECTED');\n  },\n  simulateVehicleAway: () => {\n    socket.emit('simulate_vehicle', 'NONE');\n  }\n};\nexport default socketService;","map":{"version":3,"names":["io","SOCKET_URL","process","env","REACT_APP_BACKEND_URL","socket","on","console","log","error","socketService","subscribeToSlotUpdates","callback","off","subscribeToGateUpdates","subscribeToEntryGateUpdates","subscribeToExitGateUpdates","subscribeToDeviceStatus","subscribeToDatabaseSlotUpdates","openGate","emit","closeGate","openEntryGate","closeEntryGate","openExitGate","closeExitGate","adminOverrideSlot","slotNumber","state","simulateVehicleDetected","simulateVehicleAway"],"sources":["C:/Users/nagas/Desktop/Uparkweb/frontend/src/services/socketService.js"],"sourcesContent":["// src/services/socketService.js\r\nimport { io } from 'socket.io-client';\r\n\r\n// Connect to the server (adjust URL based on your deployment)\r\nconst SOCKET_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\n// Socket connection events\r\nsocket.on('connect', () => {\r\n  console.log('Connected to socket server');\r\n});\r\n\r\nsocket.on('disconnect', () => {\r\n  console.log('Disconnected from socket server');\r\n});\r\n\r\nsocket.on('connect_error', (error) => {\r\n  console.error('Socket connection error:', error);\r\n});\r\n\r\n// API for sending commands to the ESP32\r\nconst socketService = {\r\n  // Subscribe to real-time updates\r\n  subscribeToSlotUpdates: (callback) => {\r\n    socket.on('slot_update', callback);\r\n    return () => socket.off('slot_update', callback);\r\n  },\r\n  \r\n  // Legacy single gate status\r\n  subscribeToGateUpdates: (callback) => {\r\n    socket.on('gate_update', callback);\r\n    return () => socket.off('gate_update', callback);\r\n  },\r\n  // New: entry/exit gate statuses\r\n  subscribeToEntryGateUpdates: (callback) => {\r\n    socket.on('entry_gate_update', callback);\r\n    return () => socket.off('entry_gate_update', callback);\r\n  },\r\n  subscribeToExitGateUpdates: (callback) => {\r\n    socket.on('exit_gate_update', callback);\r\n    return () => socket.off('exit_gate_update', callback);\r\n  },\r\n  \r\n  subscribeToDeviceStatus: (callback) => {\r\n    socket.on('device_status', callback);\r\n    return () => socket.off('device_status', callback);\r\n  },\r\n  \r\n  // Subscribe to database slot updates (when hardware data updates the database)\r\n  subscribeToDatabaseSlotUpdates: (callback) => {\r\n    socket.on('database_slot_update', callback);\r\n    return () => socket.off('database_slot_update', callback);\r\n  },\r\n  \r\n  // Control functions\r\n  openGate: () => {\r\n    socket.emit('control_gate', 'OPEN');\r\n  },\r\n  \r\n  closeGate: () => {\r\n    socket.emit('control_gate', 'CLOSE');\r\n  },\r\n  // New granular gate controls\r\n  openEntryGate: () => socket.emit('control_entry_gate', 'OPEN'),\r\n  closeEntryGate: () => socket.emit('control_entry_gate', 'CLOSE'),\r\n  openExitGate: () => socket.emit('control_exit_gate', 'OPEN'),\r\n  closeExitGate: () => socket.emit('control_exit_gate', 'CLOSE'),\r\n\r\n  // Admin override: set slot state\r\n  adminOverrideSlot: ({ slotNumber, state }) => {\r\n    socket.emit('admin_override_slot', { slotNumber, state });\r\n  },\r\n  \r\n  // Simulation functions (for testing without actual vehicle detection)\r\n  simulateVehicleDetected: () => {\r\n    socket.emit('simulate_vehicle', 'DETECTED');\r\n  },\r\n  \r\n  simulateVehicleAway: () => {\r\n    socket.emit('simulate_vehicle', 'NONE');\r\n  }\r\n};\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}