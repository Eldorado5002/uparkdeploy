{"ast":null,"code":"// src/services/api.js\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\nconsole.log('üîó API_BASE configured as:', API_BASE);\nconsole.log('üåç Environment:', process.env.NODE_ENV);\n\n// Helper function to handle fetch errors with better debugging\nasync function handleFetch(url, options = {}) {\n  try {\n    console.log('üöÄ Making request to:', url);\n    console.log('üì§ Request options:', options);\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n    console.log('üì• Response status:', response.status);\n    console.log('üì• Response ok:', response.ok);\n    return response;\n  } catch (error) {\n    console.error('üö® Fetch error:', error);\n    console.error('üö® Error type:', error.constructor.name);\n    console.error('üö® Error message:', error.message);\n\n    // Provide more helpful error messages\n    if (error.message.includes('Failed to fetch')) {\n      throw new Error(`Cannot connect to backend server at ${API_BASE}. Please check if the backend is running and the URL is correct.`);\n    }\n    throw error;\n  }\n}\nexport async function requestOtp({\n  name,\n  phone\n}) {\n  try {\n    const url = `${API_BASE}/api/auth/request-otp`;\n    const res = await handleFetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        phone\n      })\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      console.error('‚ùå Request OTP error response:', text);\n      throw new Error(`HTTP ${res.status}: ${text}`);\n    }\n    const data = await res.json();\n    console.log('‚úÖ Request OTP success:', data);\n    return data; // { success, expiresAt, devCode? }\n  } catch (error) {\n    console.error('‚ùå Request OTP error:', error);\n    throw error;\n  }\n}\nexport async function verifyOtp({\n  phone,\n  code\n}) {\n  try {\n    console.log('Making request to:', `${API_BASE}/api/auth/verify-otp`);\n    const res = await fetch(`${API_BASE}/api/auth/verify-otp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        phone,\n        code\n      })\n    });\n    console.log('Response status:', res.status);\n    if (!res.ok) {\n      const text = await res.text();\n      console.error('Error response text:', text);\n      throw new Error(`HTTP ${res.status}: ${text}`);\n    }\n    const data = await res.json();\n    return data; // { success, user, token }\n  } catch (error) {\n    console.error('Verify OTP error:', error);\n    throw error;\n  }\n}\n\n// Test function to verify backend connectivity\nexport async function testBackendConnection() {\n  try {\n    const url = `${API_BASE}/api/health`;\n    console.log('üîç Testing backend connection...');\n    const res = await handleFetch(url, {\n      method: 'GET'\n    });\n    if (!res.ok) {\n      throw new Error(`Backend health check failed with status ${res.status}`);\n    }\n    const data = await res.json();\n    console.log('‚úÖ Backend connection successful:', data);\n    return data;\n  } catch (error) {\n    console.error('‚ùå Backend connection failed:', error);\n    throw error;\n  }\n}\nexport async function checkPhone({\n  phone\n}) {\n  try {\n    const url = `${API_BASE}/api/auth/check-phone`;\n    const res = await handleFetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        phone\n      })\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      console.error('‚ùå Check phone error response:', text);\n      throw new Error(`HTTP ${res.status}: ${text}`);\n    }\n    const data = await res.json();\n    console.log('‚úÖ Check phone success:', data);\n    return data; // { exists, user?, token? }\n  } catch (error) {\n    console.error('‚ùå Check phone error:', error);\n    throw error;\n  }\n}\nexport async function updateVehicles({\n  phone,\n  vehicles\n}) {\n  const res = await fetch(`${API_BASE}/api/users/update-vehicles`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      phone,\n      vehicles\n    })\n  });\n  const data = await res.json();\n  if (!res.ok) throw new Error(data.error || 'Failed to update vehicles');\n  return data; // { success, user }\n}","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_BACKEND_URL","console","log","NODE_ENV","handleFetch","url","options","response","fetch","headers","status","ok","error","constructor","name","message","includes","Error","requestOtp","phone","res","method","body","JSON","stringify","text","data","json","verifyOtp","code","testBackendConnection","checkPhone","updateVehicles","vehicles"],"sources":["C:/Users/nagas/Desktop/Uparkweb/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nconst API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';\r\n\r\nconsole.log('üîó API_BASE configured as:', API_BASE);\r\nconsole.log('üåç Environment:', process.env.NODE_ENV);\r\n\r\n// Helper function to handle fetch errors with better debugging\r\nasync function handleFetch(url, options = {}) {\r\n  try {\r\n    console.log('üöÄ Making request to:', url);\r\n    console.log('üì§ Request options:', options);\r\n    \r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n    \r\n    console.log('üì• Response status:', response.status);\r\n    console.log('üì• Response ok:', response.ok);\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('üö® Fetch error:', error);\r\n    console.error('üö® Error type:', error.constructor.name);\r\n    console.error('üö® Error message:', error.message);\r\n    \r\n    // Provide more helpful error messages\r\n    if (error.message.includes('Failed to fetch')) {\r\n      throw new Error(`Cannot connect to backend server at ${API_BASE}. Please check if the backend is running and the URL is correct.`);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function requestOtp({ name, phone }) {\r\n  try {\r\n    const url = `${API_BASE}/api/auth/request-otp`;\r\n    const res = await handleFetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ name, phone }),\r\n    });\r\n    \r\n    if (!res.ok) {\r\n      const text = await res.text();\r\n      console.error('‚ùå Request OTP error response:', text);\r\n      throw new Error(`HTTP ${res.status}: ${text}`);\r\n    }\r\n    \r\n    const data = await res.json();\r\n    console.log('‚úÖ Request OTP success:', data);\r\n    return data; // { success, expiresAt, devCode? }\r\n  } catch (error) {\r\n    console.error('‚ùå Request OTP error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function verifyOtp({ phone, code }) {\r\n  try {\r\n    console.log('Making request to:', `${API_BASE}/api/auth/verify-otp`);\r\n    const res = await fetch(`${API_BASE}/api/auth/verify-otp`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ phone, code }),\r\n    });\r\n    \r\n    console.log('Response status:', res.status);\r\n    \r\n    if (!res.ok) {\r\n      const text = await res.text();\r\n      console.error('Error response text:', text);\r\n      throw new Error(`HTTP ${res.status}: ${text}`);\r\n    }\r\n    \r\n    const data = await res.json();\r\n    return data; // { success, user, token }\r\n  } catch (error) {\r\n    console.error('Verify OTP error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Test function to verify backend connectivity\r\nexport async function testBackendConnection() {\r\n  try {\r\n    const url = `${API_BASE}/api/health`;\r\n    console.log('üîç Testing backend connection...');\r\n    const res = await handleFetch(url, { method: 'GET' });\r\n    \r\n    if (!res.ok) {\r\n      throw new Error(`Backend health check failed with status ${res.status}`);\r\n    }\r\n    \r\n    const data = await res.json();\r\n    console.log('‚úÖ Backend connection successful:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('‚ùå Backend connection failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function checkPhone({ phone }) {\r\n  try {\r\n    const url = `${API_BASE}/api/auth/check-phone`;\r\n    const res = await handleFetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ phone }),\r\n    });\r\n    \r\n    if (!res.ok) {\r\n      const text = await res.text();\r\n      console.error('‚ùå Check phone error response:', text);\r\n      throw new Error(`HTTP ${res.status}: ${text}`);\r\n    }\r\n    \r\n    const data = await res.json();\r\n    console.log('‚úÖ Check phone success:', data);\r\n    return data; // { exists, user?, token? }\r\n  } catch (error) {\r\n    console.error('‚ùå Check phone error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateVehicles({ phone, vehicles }) {\r\n  const res = await fetch(`${API_BASE}/api/users/update-vehicles`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ phone, vehicles }),\r\n  });\r\n  const data = await res.json();\r\n  if (!res.ok) throw new Error(data.error || 'Failed to update vehicles');\r\n  return data; // { success, user }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}